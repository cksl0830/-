from heapq import heappop, heappush

INF = 1e9
graph = []

def make_map(n, fares):
    graph = [[] for i in range(n+1)]

    for fare in fares:
        s, d, cost = fare[0], fare[1], fare[2]
        graph[s].append([d, cost])
        graph[d].append([s, cost])
    
    return graph

def dijkstra(a, b):
    global graph
    n = len(graph)
    table = [INF]*n
    table[a] = 0
    q = [[0, a]] #비용, 출발지점 

    while q:
        dist, now = heappop(q)
        if table[now] < dist: 
            continue

        for i in graph[now]:
            cost=dist+i[1]
            if cost < table[i[0]]:
                table[i[0]] = cost
                heappush(q, [cost, i[0]])
    
    return table[b]

def solution(n, s, a, b, fares):
    global graph
    graph=make_map(n, fares)
    cost = dijkstra(s, a) + dijkstra(s, b)

    for i in range(1, n+1):
        if s != i:
            cost = min(cost, dijkstra(s, i) + dijkstra(i, a) + dijkstra(i, b))
    
    return cost
  
  
  
  // 다른 사람의 풀이 ( 플로이드 워셜 ) 
  
  def solution(n, s, a, b, fares):
    
    INF=1e9
    answer=INF
    cost = [[INF] * (n+1) for _ in range(n+1)]
        
    for i, j, c in fares:
        cost[i][j] = c
        cost[j][i] = c
    
    for i in range(1,n+1):
        cost[i][i]=0
        
    for k in range(1, n+1):
            for i in range(1, n+1):
                for j in range(1, n+1):
                    cost[i][j] = min(cost[i][k] + cost[k][j], cost[i][j])
    
    for i in range(1, n+1):
        answer = min(cost[s][i] + cost[i][a] + cost[i][b], answer)
    
    return answer
  
