// 리스트로 풀기 

import sys
sys.setrecursionlimit(10**6)

def preorder(arr, answer):
    head = arr[0]
    head_left = []
    head_right = []
    
    # 트리 분산
    for i in range(1, len(arr)):
        if head[0] > arr[i][0]:
            head_left.append(arr[i])
        else:
            head_right.append(arr[i])
    
    # 노드번호 담기
    answer.append(head[2])
    if len(head_left) > 0:
        preorder(head_left, answer)
    if len(head_right) > 0:
        preorder(head_right, answer)


def postorder(arr, answer):
    head = arr[0]
    head_left = []
    head_right = []
    
    # 트리 분산
    for i in range(1, len(arr)):
        if head[0] > arr[i][0]:
            head_left.append(arr[i])
        else:
            head_right.append(arr[i])
    
    # 노드번호 담기
    if len(head_left) > 0:
        postorder(head_left, answer)
    if len(head_right) > 0:
        postorder(head_right, answer)
    answer.append(head[2])


def solution(nodeinfo):
    pre = []
    post = []
    
    for i in range(len(nodeinfo)):
        nodeinfo[i].append(i+1)
    
    arr = sorted(nodeinfo, key = lambda x : (-x[1], x[0]))
    
    preorder(arr, pre)
    postorder(arr, post)
    
    return [pre, post]
    
    
    
// 트리를 만들어서 딕셔너리로 풀기 

from collections import defaultdict
import sys
sys.setrecursionlimit(10**6)
 
def preOrder(tree, root, answer):
    answer.append(root)

    left, right = tree[root][0], tree[root][1]
    if left != -1:
        preOrder(tree, left, answer)
    if right != -1:
        preOrder(tree, right, answer)
        
    return answer
 
def postOrder(tree, root, answer):
    
    left, right = tree[root][0], tree[root][1]
    if left != -1:
        postOrder(tree, left, answer)
    if right != -1:
        postOrder(tree,right, answer)
    answer.append(root)

    return answer
 
def makeTree(tree, nodeDict, root, node):
    x, y = nodeDict[node][0], nodeDict[node][1]

    while True:
        rootX, rootY = nodeDict[root][0], nodeDict[root][1]
        # 왼쪽 서브트리에 삽입
        if rootX > x:
            if tree[root][0] == -1:
                tree[root][0] = node
                break
            else:
                root = tree[root][0]

        # 오른쪽 서브트리에 삽입
        else:
            if tree[root][1] == -1:
                tree[root][1] = node
                break
            else:
                root = tree[root][1]
            

def solution(nodeinfo):

    dic = defaultdict(list)
    for idx, node in enumerate(nodeinfo):
        dic[idx+1] = node

    # Root부터 왼쪽, 오른쪽 순서로 내려오는 노드 형태로 정렬
    arr = sorted(dic.items(), key = lambda x: (-x[1][1], x[1][0]))
    root = arr[0][0]
    nodeDict = dict(arr)

    # 트리의 왼쪽, 오른쪽 자식 노드의 인덱스를 -1로 초기화
    tree = defaultdict(list)
    for i in range(1, len(nodeinfo)+1):
        tree[i] = [-1,-1]

    for i in range(1, len(tree)):
        makeTree(tree, nodeDict, root, arr[i][0])
    
    # 순회 경로를 위한 빈 리스트를 매개변수로 초기화하고 함수 콜
    pre = preOrder(tree, root, [])
    post = postOrder(tree, root, [])

    return [pre,post]
