from collections import deque
  
def move(x,y,graph,n):
    
    temp=[]
    dir = [(-1, 0), (1, 0), (0, 1), (0, -1)]
    for dx,dy in dir:
        nx=(x[0]+dx,x[1]+dy)
        ny=(y[0]+dx,y[1]+dy)
        if graph[nx[0]][nx[1]]==0 and graph[ny[0]][ny[1]]==0:
            temp.append((nx,ny))
    
    # 상하좌우
    
    # 가로방향
    if x[0]==y[0]:
        for i in [-1,1]:
            if graph[x[0]+i][x[1]]==0 and graph[y[0]+i][y[1]]==0:
                temp.append((x,(x[0]+i,x[1])))
                temp.append((y,(y[0]+i,y[1])))
    # 세로방향
    else:
        for i in [-1,1]:
            if graph[x[0]][x[1]+i]==0 and graph[y[0]][y[1]+i]==0:
                temp.append((x,(x[0],x[1]+i)))
                temp.append((y,(y[0],y[1]+i)))
                
    return temp
        
    
def solution(board):
    
    n=len(board)
    graph = [[1] * (n+2) for _ in range(n+2)]
    for i in range(n):
        for j in range(n):
            graph[i+1][j+1] = board[i][j]
    
    q = deque([((1, 1), (1, 2), 0)])
    visit=set([((1,1),(1,2))])
    
    while q:
        x,y,cnt=q.popleft()
        if x==(n,n) or y==(n,n):
            return cnt
        for m in move(x,y,graph,n):
            if m not in visit:
                q.append((*m,cnt+1))
                visit.add(m)
