from collections import deque,defaultdict
from itertools import permutations
from copy import deepcopy

INF=1e9
dx=[-1,1,0,0]
dy=[0,0,1,-1]


def ctrl(sr, sc, i, board):
    r, c = sr, sc
    while True:
        nr = r + dx[i]
        nc = c + dy[i]
        if not (0<=nr<4 and 0<=nc<4):
            return r, c
        if board[nr][nc] != 0:
            return nr, nc
        r = nr
        c = nc

def bfs(start, end, board):
    sr, sc = start
    er, ec = end
    q = deque()
    q.append((sr, sc, 0))
    visit = [[0]*4 for _ in range(4)]
    visit[sr][sc] = 1
    
    while q:
        sr, sc, temp = q.popleft()
        if sr == er and sc == ec:
            return temp
        for i in range(4):
            nr = sr+dx[i]
            nc = sc+dy[i]
            if 0<=nr<4 and 0<=nc<4 and visit[nr][nc]==0:
                q.append((nr,nc, temp+1))
                visit[nr][nc] = 1
            nr, nc = ctrl(sr, sc, i, board)
            q.append((nr, nc, temp+1))

def solution(board, r, c):
    
    loc = defaultdict(list) # 들어있는 카드
    remove = [] # 제거할 카드 번호
    for i in range(4):
        for j in range(4):
            if board[i][j]:
                if board[i][j] not in remove: 
                    remove.append(board[i][j])
                loc[board[i][j]].append((i, j))
    
    answer = INF            
    remove = list(permutations(remove, len(remove))) # 순열

    for per in remove:
        graph = deepcopy(board) 
        cnt = 0
        x, y = r, c
        for p in per:
            first = bfs((x, y), loc[p][0], graph) # 1번째 카드찾기까지 횟수
            second = bfs((x, y), loc[p][1], graph) # 2번째 카드찾기까지 횟수
            if first < second:
                cnt += first
                cnt += bfs(loc[p][0], loc[p][1], graph)
                x, y = loc[p][1]
            else:
                cnt += second
                cnt += bfs(loc[p][1], loc[p][0], graph)
                x, y = loc[p][0]
            graph[loc[p][0][0]][loc[p][0][1]] = 0 # 카드 지우기
            graph[loc[p][1][0]][loc[p][1][1]] = 0 # 카드 지우기
            cnt += 2 # enter
        answer = min(answer, cnt)
        
    return answer
