import copy

graph=[[] for _ in range(4)]

#위부터 반시계 방향 순서대로
dx = [-1, -1, 0, 1, 1, 1, 0, -1]
dy = [0, -1, -1, -1, 0, 1, 1, 1]

#물고기 번호, 방향 배열 형태로 그래프에 담기
for i in range(4):
    data=(list(map(int,input().split())))
    for j in range(4):
        graph[i].append([data[2*j],data[2*j+1]-1])
        

answer=0

def dfs(x,y,score,graph):
    global answer
    score+=graph[x][y][0] #먹은 물고기 번호 더해주기
    answer=max(answer,score) #상어가 그 방향으로 가면서 가장 번호가 큰 물고기를 먹기 위해 
    graph[x][y][0]=0 #물고기 먹으면 사라짐
    
    #상어가 먹은 후 물고기들의 움직임 #2단계 
    for fish in range(1,17):
        fish_x,fish_y=-1,-1
        temp=-1
        for i in range(4):
            for j in range(4):
                if graph[i][j][0]==fish:
                    fish_x,fish_y=i,j
                    temp=graph[fish_x][fish_y][1] #방향 번호   
                    break  
        if temp==-1:  #물고기가 먹혀서 없으니  
            continue  #다음 물고기 이동          
        
        # 물고기 이동 및 교환
        for k in range(8):
            nd=(temp+k)%8
            nx=fish_x+dx[nd]
            ny=fish_y+dy[nd]
            if 0<=nx<4 and 0<=ny<4: 
                if not (nx==x and ny==y):
                    graph[fish_x][fish_y][1]=nd
                    graph[fish_x][fish_y],graph[nx][ny]=graph[nx][ny],graph[fish_x][fish_y]
                    break
    
    # 상어 물고기 다시 먹음
    shrak=graph[x][y][1]
    for i in range(1,5):
        nx = x + dx[shrak]*i
        ny = y + dy[shrak]*i
        if (0<= nx < 4 and 0<= ny < 4) and graph[nx][ny][0]!=0:
            dfs(nx, ny, score, copy.deepcopy(graph)) #dfs 돌며 그래프 변질안되게 deepcopy 필수! 

dfs(0,0,0,graph) #시작 (0,0)
print(answer)



// 다른 사람의 풀이 

import copy

# 4 X 4 크기 격자에 존재하는 각 물고기의 번호(없으면 -1)와 방향 값을 담는 테이블
array = [[None] * 4 for _ in range(4)]

for i in range(4):
    data = list(map(int, input().split()))
    # 매 줄마다 4마리의 물고기를 하나씩 확인하며
    for j in range(4):
        # 각 위치마다 [물고기의 번호, 방향]을 저장
        array[i][j] = [data[j * 2], data[j * 2 + 1] - 1]

# 8가지 방향에 대한 정의
dx = [-1, -1, 0, 1, 1, 1, 0, -1]
dy = [0, -1, -1, -1, 0, 1, 1, 1]

# 현재 위치에서 왼쪽으로 회전된 결과 반환
def turn_left(direction):
    return (direction + 1) % 8

result = 0 # 최종 결과

# 현재 배열에서 특정한 번호의 물고기 위치 찾기
def find_fish(array, index):
    for i in range(4):
        for j in range(4):
            if array[i][j][0] == index:
                return (i, j)
    return None

# 모든 물고기를 회전 및 이동시키는 함수
def move_all_fishes(array, now_x, now_y):
    # 1번부터 16번까지의 물고기를 차례대로 (낮은 번호부터) 확인
    for i in range(1, 17):
        # 해당 물고기의 위치를 찾기
        position = find_fish(array, i)
        if position != None:
            x, y = position[0], position[1]
            direction = array[x][y][1]
            # 해당 물고기의 방향을 왼쪽으로 계속 회전시키며 이동이 가능한지 확인
            for j in range(8):
                nx = x + dx[direction]
                ny = y + dy[direction]
                # 해당 방향으로 이동이 가능하다면 이동 시키기
                if 0 <= nx and nx < 4 and 0 <= ny and ny < 4:
                    if not (nx == now_x and ny == now_y):
                        array[x][y][1] = direction
                        array[x][y], array[nx][ny] = array[nx][ny], array[x][y]
                        break
                direction = turn_left(direction)
        
# 상어가 현재 위치에서 먹을 수 있는 모든 물고기의 위치 반환
def get_possible_positions(array, now_x, now_y):
    positions = []
    direction = array[now_x][now_y][1]
    # 현재의 방향으로 쭉 이동하기
    for i in range(4):
        now_x += dx[direction]
        now_y += dy[direction]
        # 범위를 벗어나지 않는지 확인하며
        if 0 <= now_x and now_x < 4 and 0 <= now_y and now_y < 4:
            # 물고기가 존재하는 경우
            if array[now_x][now_y][0] != -1:
                positions.append((now_x, now_y))
    return positions

# 모든 경우를 탐색하기 위한 DFS 함수
def dfs(array, now_x, now_y, total):
    global result
    array = copy.deepcopy(array) # 리스트를 통째로 복사
    
    total += array[now_x][now_y][0] # 현재 위치의 물고기 먹기
    array[now_x][now_y][0] = -1 # 물고기를 먹었으므로 번호 값을 -1로 변환
    
    move_all_fishes(array, now_x, now_y) # 전체 물고기 이동 시키기

    # 이제 다시 상어가 이동할 차례이므로, 이동 가능한 위치 찾기
    positions = get_possible_positions(array, now_x, now_y)
    # 이동할 수 있는 위치가 하나도 없다면 종료
    if len(positions) == 0:
        result = max(result, total) # 최댓값 저장
        return 
    # 모든 이동할 수 있는 위치로 재귀적으로 수행
    for next_x, next_y in positions:
        dfs(array, next_x, next_y, total)

# 청소년 상어의 시작 위치(0, 0)에서부터 재귀적으로 모든 경우 탐색
dfs(array, 0, 0, 0)
print(result)
