from collections import deque

# 중앙을 시작으로 구슬번호 재배열 (핵심)
def make_map():
    x = n // 2
    y = n // 2
    graph.append((x, y))
    dx = [0, 1, 0, -1]
    dy = [-1, 0, 1, 0]
    d = 0
    step = 0
    while True:
        if d % 2 == 0:
            step += 1
        flag = True
        for _ in range(step):
            x += dx[d]
            y += dy[d]
            graph.append((x, y))
            if x == 0 and y == 0:
                flag = False
                break
        if not flag:
            break
        d = (d + 1) % 4
        
# 빈칸 채우기 
def empty(board):
    q = deque()
    
    for x, y in graph:
        if x == n//2 and y == n//2:
            continue
        if board[x][y] == 0:
            q.append((x, y))
        elif board[x][y] > 0 and q:
            mx, my = q.popleft()
            board[mx][my], board[x][y] = board[x][y], 0
            q.append((x, y))

# 연속 4개이상 지우기
def find_four(board):
    visit = deque()
    count = 0
    number = -1
    flag = False
    for x, y in graph:
        if x == n//2 and y == n//2:
            continue
        if number == board[x][y]:
            visit.append((x, y))
            count += 1
        else:
            if count >= 4:
                flag = True
                scores[number] += count
            while visit:
                nx, ny = visit.popleft()
                if count >= 4:
                    board[nx][ny] = 0

            count = 1
            number = board[x][y]
            visit.append((x, y))

    return flag

# 그룹 만들기 (개수-번호)
def make_group(board):
    number = -1
    count = 0
    numbers = [0]
    for x, y in graph:
        if x == n//2 and y == n//2:
            continue
        if number == -1:
            number = board[x][y]
            count = 1
        else:
            if number == board[x][y]:
                count += 1
            else:
                numbers.append(count)
                numbers.append(number)
                number = board[x][y]
                count = 1

    idx = 0
    for x, y in graph:
        board[x][y] = numbers[idx]
        idx += 1
        if idx >= len(numbers):
            break

n,m=map(int,input().split())
board=[list(map(int,input().split())) for _ in range(n)]
magic=[tuple(map(int,input().split())) for _ in range(m)]
scores=[0,0,0,0]
graph=[]

dx=[-1,1,0,0]
dy=[0,0,-1,1]

x,y=(n)//2, (n)//2  #상어 위치
# main
make_map()      
for d,s in magic:
    #1단계 : 마법 
    for i in range(1,s+1):
        nx=x+dx[d-1]*i
        ny=y+dy[d-1]*i
        if 0<=nx<n and 0<=ny<n:
            board[nx][ny]=0
    
    #2단계 : 빈 칸 채우기 
    empty(board)
    
    #3단계 : 연속숫자 (4개이상) 지우기 + 점수 더하기
    while find_four(board):  #없을떄 까지 계속해야함 , (처음에 if로 해서 틀렸음)
        empty(board)
        
    #4단계 : 번호 그룹 만들기 (개수-번호)
    make_group(board)

answer=0
for i in range(1,4):
    answer+=(i*scores[i])
print(answer)




// 나의 코드 

from collections import deque

# 중앙을 시작으로 구슬번호 재배열 (핵심)
def make_map():
    sx, sy = n // 2, n // 2
    dx = [0, 1, 0, -1]
    dy = [-1, 0, 1, 0]
    arr = []
    for i in range(1, n + 1):
        if i % 2:
            for k in range(2):
                for _ in range(i):
                    sx += dx[k]
                    sy += dy[k]
                    arr.append((sx, sy))
                    if (sx, sy) == (0, 0):
                        return arr
        else:
            for k in range(2, 4):
                for _ in range(i):
                    sx += dx[k]
                    sy += dy[k]
                    arr.append((sx, sy))

# 빈칸 채우기
def empty(board):
    q = deque()
    for x, y in graph:
        if board[x][y] == 0:
            q.append((x, y))
        elif board[x][y] > 0 and q:
            mx, my = q.popleft()
            board[mx][my], board[x][y] = board[x][y], 0
            q.append((x, y))

# 연속 4개이상 지우기
def find_four(board):

    q=deque()
    flag=False
    count=0
    x,y=n//2,(n//2)-1
    temp=board[x][y]

    for x,y in graph:
        if temp==board[x][y]:
            q.append((x,y))
            count+=1
        else:
            if count>=4:
                flag=True
                scores[temp]+=count
            while q:
                nx,ny=q.popleft()
                if count>=4:
                    board[nx][ny]=0
            temp = board[x][y]
            count=1
            q.append((x,y))

    return flag


# 그룹 만들기 (개수-번호)
def make_group(board):
    count = 0
    numbers = []
    x, y = n // 2, (n // 2) - 1
    temp = board[x][y]
    for x, y in graph:
        if temp == board[x][y]:
            count +=1
        else:
            numbers.append(count)
            numbers.append(temp)
            temp = board[x][y]
            count = 1

    idx = 0
    for x, y in graph:
        if idx >= len(numbers):
            break
        board[x][y] = numbers[idx]
        idx += 1

n, m = map(int, input().split())
board = [list(map(int, input().split())) for _ in range(n)]
magic = [tuple(map(int, input().split())) for _ in range(m)]
scores = [0, 0, 0, 0]


dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

x, y = n // 2, n // 2  # 상어 위치
# main
graph=make_map()

for d, s in magic:
    # 1단계 : 마법
    for i in range(1, s + 1):
        nx = x + dx[d - 1] * i
        ny = y + dy[d - 1] * i
        if 0 <= nx < n and 0 <= ny < n:
            board[nx][ny] = 0

    # 2단계 : 빈 칸 채우기
    empty(board)

    # 3단계 : 연속숫자 (4개이상) 지우기 + 점수 더하기
    while find_four(board):  # 없을떄 까지 계속해야함 , (처음에 if로 해서 틀렸음)
        empty(board)

    # 4단계 : 번호 그룹 만들기 (개수-번호)
    make_group(board)

answer = 0
for i in range(1, 4):
    answer += (i * scores[i])
print(answer)
