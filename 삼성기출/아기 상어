from collections import deque 

n=int(input())
graph=[list(map(int,input().split())) for _ in range(n)]

dx=[0,0,-1,1] #상,하
dy=[1,-1,0,0] #우,좌

x,y=0,0
shark_size=2

# 상어 위치
for i in range(n):
    for j in range(n):
        if graph[i][j]==9:
            x=i
            y=j


def game(x,y,shark):
    distance = [[0] * n for _ in range(n)]
    visit = [[0] * n for _ in range(n)]
    
    q=deque()
    q.append((x,y))
    visit[x][y]=1
    temp=[]
    
    while q:
        a,b=q.popleft()
        for i in range(4):
            nx=a+dx[i]
            ny=b+dy[i]
            if 0<=nx<n and 0<=ny<n and visit[nx][ny]==0:
                if graph[nx][ny]<=shark:
                    q.append((nx,ny))
                    visit[nx][ny]=1
                    distance[nx][ny]=distance[a][b]+1 # 최소거리를 구하기 위해
                    if graph[nx][ny]<shark and graph[nx][ny]!=0: # 먹을 수 있는
                        temp.append((nx,ny,distance[nx][ny])) 
    return sorted(temp,key=lambda x: (x[2],x[0],x[1]))


count=0
time=0

while True:
    help = game(x,y,shark_size)
    if len(help)==0:
        break
    i,j,dist=help[0][0],help[0][1],help[0][2]
    
    time+=dist
    graph[x][y]=0 #상어 좌표 움직였으니 0 초기화 
    graph[i][j]=0  #먹었으니 0 초기화
    
    x,y=i,j #먹은 자리로 가서 다시 시작해야하므로
    count+=1 #먹은 수
    
    if count==shark_size:
        shark_size+=1
        count=0

print(time)
             
             
             
// 다른 사람의 풀이 (가독성 좋음 - 연습) 

from collections import deque
INF = 1e9 # 무한을 의미하는 값으로 10억을 설정

# 맵의 크기 N 입력
n = int(input())

# 전체 모든 칸에 대한 정보 입력
array = []
for i in range(n):
    array.append(list(map(int, input().split())))

# 아기 상어의 현재 크기 변수와 현재 위치 변수
now_size = 2
now_x, now_y = 0, 0

# 아기 상어의 시작 위치를 찾은 뒤에 그 위치엔 아무것도 없다고 처리
for i in range(n):
    for j in range(n):
        if array[i][j] == 9:
            now_x, now_y = i, j
            array[now_x][now_y] = 0

dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]

# 모든 위치까지의 '최단 거리만' 계산하는 BFS 함수
def bfs():
    # 값이 -1이라면 도달할 수 없다는 의미 (초기화)
    dist = [[-1] * n for _ in range(n)]
    # 시작 위치는 도달이 가능하다고 보며 거리는 0
    q = deque([(now_x, now_y)])
    dist[now_x][now_y] = 0
    while q:
        x, y = q.popleft()
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            if 0 <= nx and nx < n and 0 <= ny and ny < n:
                # 자신의 크기보다 작거나 같은 경우에 지나갈 수 있음
                if dist[nx][ny] == -1 and array[nx][ny] <= now_size:
                    dist[nx][ny] = dist[x][y] + 1
                    q.append((nx, ny))
    # 모든 위치까지의 최단 거리 테이블 반환
    return dist

# 최단 거리 테이블이 주어졌을 때, 먹을 물고기를 찾는 함수
def find(dist):
    x, y = 0, 0
    min_dist = INF
    for i in range(n):
        for j in range(n):
            # 도달이 가능하면서 먹을 수 있는 물고기일 때
            if dist[i][j] != -1 and 1 <= array[i][j] and array[i][j] < now_size:
                # 가장 가까운 물고기 한 마리만 선택
                if dist[i][j] < min_dist:
                    x, y = i, j
                    min_dist = dist[i][j]
    if min_dist == INF: # 먹을 수 있는 물고기가 없는 경우
        return False
    else:
        return x, y, min_dist # 먹을 물고기의 위치와 최단 거리

result = 0 # 최종 답안
ate = 0 # 현재 크기에서 먹은 양

while True:
    # 먹을 수 있는 물고기의 위치 찾기
    value = find(bfs())
    # 먹을 수 있는 물고기가 없는 경우, 현재까지 움직인 거리 출력
    if value == False:
        print(result)
        break
    else:
        # 현재 위치 갱신 및 이동 거리 변경
        now_x, now_y = value[0], value[1]
        result += value[2]
        # 먹은 위치에는 이제 아무것도 없도록 처리
        array[now_x][now_y] = 0
        ate += 1
        # 자신의 현재 크기 이상으로 먹은 경우, 크기 증가
        if ate == now_size:
            now_size += 1
            ate = 0
