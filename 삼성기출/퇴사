n=int(input())
time=[]
cost=[]
for _ in range(n):
    a,b=map(int,input().split())
    time.append(a)
    cost.append(b)
    

dp=[0]*(n+1)

for i in range(n-1,-1,-1):
    if time[i]+i>n:
        dp[i]=dp[i+1]
    else:
        dp[i]=max(cost[i]+dp[i+time[i]], dp[i+1])
    
print(max(dp))
        
       
// 역순 말고 순서대로 순환 

n=int(input())
time=[0]
cost=[0]
for _ in range(n):
    a,b=map(int,input().split())
    time.append(a)
    cost.append(b)
    

dp=[0]*(n+1)

for i in range(1,n+1):
    dp[i] = max(dp[i],dp[i-1])
    if i+time[i]-1<=n:
        dp[i+time[i]-1] = max(dp[i+time[i]-1],dp[i-1]+cost[i])
        
print(dp[-1])


// 이코테 풀이 

n = int(input()) # 전체 상담 개수
t = [] # 각 상담을 완료하는데 걸리는 기간
p = [] # 각 상담을 완료했을 때 받을 수 있는 금액
dp = [0] * (n + 1) # 다이나믹 프로그래밍을 위한 1차원 DP 테이블 초기화
max_value = 0

for _ in range(n):
    x, y = map(int, input().split())
    t.append(x)
    p.append(y)

# 리스트를 뒤에서부터 거꾸로 확인
for i in range(n - 1, -1, -1):
    time = t[i] + i
    # 상담이 기간 안에 끝나는 경우
    if time <= n:
        # 점화식에 맞게, 현재까지의 최고 이익 계산
        dp[i] = max(p[i] + dp[time], max_value)
        max_value = dp[i]
    # 상담이 기간을 벗어나는 경우
    else:
        dp[i] = max_value

print(max_value)
        
