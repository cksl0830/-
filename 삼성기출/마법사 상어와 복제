"""
상어 물고기 다 안에있음 (한칸에 둘이상 물고기 가능, 같이 있기 가능)
1. 물고기 복제 -> 5단계에서 나타남 
2. 모든 물고기이동 (이동할 수 있을떄까지 반시계 회전, 없으면 제자리)
3. 상어 상하좌우 3칸이동, 이동하면서 물고기 있으면 물고기 제외-> 냄새남김 
   물고기가 가장 많이 제거되는 방법으로 이동 (많으면 사전순)
4. 연습 두번전의 냄새 사라짐 
5. 물고기 1과 동일한 자리에 한마리 더생김 (1과 그대로)
"""

import copy

f_dx = [0, -1, -1, -1, 0, 1, 1, 1]
f_dy = [-1, -1, 0, 1, 1, 1, 0, -1]
dx = [-1, 0, 1, 0]
dy = [0, -1, 0, 1]

m, s = map(int, input().split())
fish = [list(map(int, input().split())) for _ in range(m)]
graph = [[[] for _ in range(4)] for _ in range(4)]

for x, y, d in fish:
    graph[x - 1][y - 1].append(d - 1)

sx,sy=map(int, input().split())
shark = (sx-1,sy-1)
smell = [[0] * 4 for _ in range(4)]

#물고기 이동 
def move_fish():
    arr = [[[] for _ in range(4)] for _ in range(4)]
    for x in range(4):
        for y in range(4):
            while temp[x][y]:
                d = temp[x][y].pop()
                for i in range(d, d - 8, -1):
                    i %= 8
                    nx = x + f_dx[i] 
                    ny = y + f_dy[i]
                    if (nx, ny) != shark and 0 <= nx < 4 and 0 <= ny < 4 and not smell[nx][ny]:
                        arr[nx][ny].append(i)
                        break
                else:
                    arr[x][y].append(d)
    return arr

#상어 이동 
def dfs(x, y, count, score, visit):
    global answer, shark, eat
    if count == 3:   # 3번 이동한 경우 그만 
        if answer < score:
            answer = score
            shark = (x, y)
            eat = visit[:]
        return
    for d in range(4):
        nx = x + dx[d]
        ny = y + dy[d]
        if 0 <= nx < 4 and 0 <= ny < 4:
            if (nx, ny) not in visit:  #첫 방문 
                visit.append((nx, ny))
                dfs(nx, ny, count + 1, score + len(temp[nx][ny]), visit)
                visit.pop()
            else:  # 방문한 경우
                dfs(nx, ny, count + 1, score, visit)

for _ in range(s):
    eat = list()
    answer = -1
    # 1. 모든 물고기 복제
    temp = copy.deepcopy(graph)
    # 2. 물고기 이동
    temp = move_fish()
    # 3. 상어이동 - 백트래킹
    dfs(shark[0], shark[1],0, 0, eat)
    for x, y in eat:
        if temp[x][y]:
            temp[x][y] = []
            smell[x][y] = 3   # 3번 돌면 없어짐
    # 4. 냄새 사라짐 
    for i in range(4):
        for j in range(4):
            if smell[i][j]:
                smell[i][j] -= 1
    # 5. 복제 마법
    for i in range(4):
        for j in range(4):
            graph[i][j] += temp[i][j]

# 물고기 수 구하기 
result = 0
for i in range(4):
    for j in range(4):
        result += len(graph[i][j])

print(result)
