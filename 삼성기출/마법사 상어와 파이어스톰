from collections import deque

N, Q = map(int, input().split())
graph = [list(map(int, input().split())) for _ in range(2 ** N)]
L = list(map(int, input().split()))

dx = [0, 1, 0, -1]
dy = [1, 0, -1, 0]


def fire_storm(l):
    global graph

    temp = [[0] * 2 ** N for _ in range(2 ** N)]
    for x in range(0, 2 ** N, l):
        for y in range(0, 2 ** N, l):
            section = [[0] * l for _ in range(l)]
            for i in range(l):
                for j in range(l):
                    section[i][j] = graph[x + i][y + j]
            section = rotate(section)
            for i in range(l):
                for j in range(l):
                    temp[x + i][y + j] = section[i][j]
    return temp


def remove(graph):
    temp = []
    for x in range(2 ** N):
        for y in range(2 ** N):
            if graph[x][y]:
                cnt = 0
                for i in range(4):
                    nx = x + dx[i]
                    ny = y + dy[i]
                    if 0 <= nx < 2 ** N and 0 <= ny < 2 ** N:
                        if graph[nx][ny]:
                            cnt += 1
                if cnt < 3:
                    temp.append((x, y))
    for x, y in temp:
        graph[x][y] -= 1

    return graph


def rotate(a):
    a = list(zip(*a[::-1]))
    a = [list(s) for s in a]
    return a


def bfs(x, y, visit):
    global count
    q = deque()
    cnt = 1
    q.append((x, y))
    visit[x][y] = 1
    while q:
        x, y = q.popleft()
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            if 0 <= nx < 2**N and 0 <= ny < 2**N and visit[nx][ny] == 0:
                if graph[nx][ny]:
                    cnt += 1
                    visit[nx][ny] = 1
                    q.append((nx, ny))

    count = max(count, cnt)
    return count


for l in L:
    graph = fire_storm(2 ** l)
    graph = remove(graph)

answer = 0
count = 0
visit = [[0] * (2 ** N) for _ in range(2 ** N)]
for i in range(2 ** N):
    for j in range(2 ** N):
        if graph[i][j]:
            answer += graph[i][j]
            if visit[i][j] == 0:
                count = bfs(i, j, visit)

if count == 1:
    count = 0

print(answer)
print(count)
