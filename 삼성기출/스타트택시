from collections import deque

def findPassenger(taxi): # 최단 경로의 손님을 찾는 함수
    q = deque()
    q.append(taxi)
    visited = [[0] * N for _ in range(N)]
    minDistance = 1e9
    guest = [] # 최단 경로인 승객들을 저장할 리스트
    while q:
        x, y = q.popleft()
        if visited[x][y] > minDistance:
            break
        if [x, y] in passenger_start:  # 최단 경로 손님 찾기
            minDistance = visited[x][y]
            guest.append([x, y])
        else:
            for i in range(4):
                nx = x + dx[i]
                ny = y + dy[i]
                if 0 <= nx < N and 0 <= ny < N and road[nx][ny] != 1 and visited[nx][ny] == 0:
                    visited[nx][ny] = visited[x][y] + 1
                    q.append([nx, ny])
                   
    if guest:
        guest.sort() # 최단 경로, 행, 열를 기준으로 오름차순으로 정렬하기
        return visited[guest[0][0]][guest[0][1]], guest[0][0], guest[0][1]
    else: # 손님한테 갈 수 없는 경우
        return -1, -1, -1


def goDestination(start, end): # 손님의 목적지로 가는 함수
    q = deque()
    q.append(start)
    visited = [[0] * N for _ in range(N)]
    while q:
        x, y = q.popleft()
        if [x, y] == end:
            break
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            if 0 <= nx < N and 0 <= ny < N and road[nx][ny] != 1 and visited[nx][ny] == 0:
                visited[nx][ny] = visited[x][y] + 1
                q.append([nx, ny])
    
    return visited[x][y], x, y
    

# 입력받기
N, M, fuel = map(int, input().split())
road = [list(map(int, input().split())) for _ in range(N)]
tx, ty = map(int, input().split())
taxi=[tx-1, ty-1]

passenger_start = [] # 손님들의 출발지를 저장할 리스트
passenger_end = [] # 손님들의 도착지를 저장할 리스트
for _ in range(M):
    sx, sy, ex, ey = map(int, input().split())
    passenger_start.append([sx - 1, sy - 1])
    passenger_end.append([ex - 1, ey - 1])

dx = [0, 0, 1, -1]
dy = [1, -1, 0, 0]

for _ in range(M):
    distance, px, py = findPassenger(taxi) # 최단 경로의 손님을 찾는 함수
    if distance == -1 or fuel - distance <= 0: # 손님에게 못가거나 연료가 떨어지는 종료조건
        fuel = -1
        break
    fuel -= distance # 손님한테 가는 길에 사용한 연료 계산
    idx = passenger_start.index([px, py]) # 최단 경로의 손님의 인덱스 찾기
    passenger_start[idx] = [-1, -1] # 손님을 태웠기에 findPassenger에서 제외
    distance2, px2, py2 = goDestination([px, py], passenger_end[idx]) # 손님의 목적지로 가는 함수
    if [px2, py2] != passenger_end[idx] or fuel - distance2 < 0: # 도착지에 도달하지 못하거나 연료가 떨어지는 종료조건
        fuel = -1
        break
    # 손님을 도착지에 잘 데려다준 경우
    fuel += distance2 # 도착지까지 연료를 - distance 사용하고 충전이 + distance * 2 이기에 최종적으로 + distance하기
    taxi = [px2, py2] # 택시 위치 갱신하기

print(fuel)
