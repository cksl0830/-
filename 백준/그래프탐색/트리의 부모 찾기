// BFS 풀이

from collections import deque

num=int(input())
graph=[ [] for _ in range(num+1)] #방문한 노드만 그래프 생성
for _ in range(num-1):
    a,b=map(int,input().split())
    graph[a].append(b)
    graph[b].append(a)

visited=[0]*(num+1)
q=deque()
q.append(1)

while q:
    temp=q.popleft()
    for i in graph[temp]:
        if visited[i]==0:
            visited[i]=temp  #부모노드 담기
            q.append(i) 

for i in range(2,num+1):
    print(visited[i])
    
            
 
// 다른 DFS 풀이  
import sys
sys.setrecursionlimit(10**6)   # 재귀 깊이 늘려주기 (런타임 오류 방지)

num=int(input())
graph=[ [] for _ in range(num+1)] #방문한 노드만 그래프 생성

for _ in range(num-1):
    a,b=map(int,input().split())
    graph[a].append(b)
    graph[b].append(a)

visited=[0]*(num+1)

def dfs(temp):
    for i in graph[temp]:
        if visited[i]==0:
            visited[i]=temp
            dfs(i)

dfs(1) # 루트 노드 1 부터 시작 

for i in range(2,num+1):
    print(visited[i])
    
            
    
