// BFS 방법

from collections import deque

num=int(input())
graph=[[0]*(num+1) for _ in range(num+1)]
for c in range(int(input())):
    a,b=map(int,input().split())
    graph[a][b]=1
    graph[b][a]=1

visited=[0]*(num+1)
q=deque()
q.append(1)
visited[1]=1   
while q:
    temp=q.popleft()
    for i in range(1,num+1):
        if graph[temp][i]==1 and visited[i]==0:
            visited[i]=1
            q.append(i)
            
print(visited.count(1)-1)
            
            
// DFS 방법

n = int(input())
m = int(input())

graph = [[0] * (n+1) for _ in range(n+1)]
visited = [0] * (n+1)

for _ in range(m):
    a, b = map(int, input().split())
    graph[a][b] = graph[b][a] = 1

result = []
def dfs(v):
    visited[v] = 1
    for i in range(1, n+1):
        if graph[v][i] == 1 and visited[i] == 0:
            result.append(i)
            dfs(i)
    return len(result)

print(dfs(1))
    
