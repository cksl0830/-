# DFS 풀이

def solution(numbers, target):
    global answer
    answer=0
    
    def dfs(idx,result):
        global answer
        n=len(numbers)
    
        if n==idx:
            if result==target:
                answer+=1
                return
        else:
            dfs(idx+1,result+numbers[idx])
            dfs(idx+1,result-numbers[idx])   
    dfs(0,0)
    return answer
     

# BFS 풀이

from collections import deque

def solution(numbers, target):
    answer = 0
    queue = deque() #queue 생성
    
    length = len(numbers)
    queue.append([-numbers[0], 0])
    queue.append([+numbers[0], 0])
    
    while queue :
        num, i = queue.popleft()
        if i+1 == length :
            if num == target : answer += 1
        else :
            queue.append([num - numbers[i + 1], i + 1])
            queue.append([num + numbers[i + 1], i + 1])
    
    return answer
    
    
    
// 다른 사람의 풀이 

from itertools import product

def solution(numbers, target):
    l = [(x, -x) for x in numbers]
    s = list(map(sum, product(*l)))
    return s.count(target)
