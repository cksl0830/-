def solution(triangle): # dp 테이블 초기화 
    dp = [[0] * len(triangle) for _ in range(len(triangle))] # dp 테이블 초기화

    dp[0][0] = triangle[0][0] 

    for i in range(0, len(triangle) - 1):  
        for j in range(len(triangle[i])): 
            dp[i + 1][j] = max(dp[i + 1][j], dp[i][j] + triangle[i + 1][j]) 
            dp[i + 1][j + 1] = max(dp[i + 1][j + 1], dp[i][j] + triangle[i + 1][j + 1]) 

    return max(dp[-1]) # dp 테이블의 마지막 원소들 중 최댓값 반환



// 다른 사람의 풀이 (효울성 테스트에서 더 우수) 

def solution(triangle):
    
    for t in range(1, len(triangle)):
        for i in range(t+1):
            if i == 0: #첫번째 끝은 한 줄이 쭉 더해져 내려감 
                triangle[t][0] += triangle[t-1][0]
            elif i == t: #맨 끝도 한 줄이 쭉 더해져 내려감 
                triangle[t][-1] += triangle[t-1][-1]
            else:
                triangle[t][i] += max( triangle[t-1][i-1], triangle[t-1][i] )
    
    return max(triangle[-1])
