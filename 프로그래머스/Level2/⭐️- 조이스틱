def solution(name):
    answer = 0
    minMove = 0
    change = [0]
    n = len(name)
    a = len(name)
    for idx, ch in enumerate(name):
        answer += min(ord(ch)-ord("A"),ord("Z")-ord(ch)+1)
        if idx != 0 and ch !="A":
            change.append(idx)
    if len(change)>1:
        for idx,i in enumerate(change):
            if idx < len(change)-1:
                a = min(i*2+n-change[idx+1],i+(n-change[idx+1])*2,a)
            elif idx == len(change)-1:
                a= min(a,i)
    else:
        a=min(change[0],n-change[0])

    return answer+a
  
  
  // 다른 사람의 코드  
  
  def solution(name):
    init_A = list("A"*len(name))
    name=list(name)
    TF=[]
    for a,b in zip(name,init_A):
        TF.append(a==b)  
    count=move_count(TF,0,0)
    for alpa in name:
        tmp=ord(alpa)-ord("A")
        count+=min(ord(alpa)-ord("A"),ord("Z")-ord(alpa)+1)
    return count

def move_count(TF,point,count):
    if sum(TF)==len(TF):
        return count
    else:
        tmp_all=[]
        target_index=[]
        tmp_TF=TF.copy()
        target_index_count=0

        while len(target_index) <= 1:
            if not TF[(point+target_index_count)%len(TF)]:
                target_index.append((point+target_index_count)%len(TF))
            if not TF[(point-target_index_count)%len(TF)]:
                target_index.append((point-target_index_count)%len(TF))
            target_index_count+=1
        #print("TF:",TF)
        #print("point:",point)
        #print("접근:",set(target_index))

        for i in set(target_index):
            if not TF[i]:
                tmp_TF=TF.copy()
                tmp_TF[i]=True
                tmp_all.append(move_count(tmp_TF,i,count+min(len(TF)-abs(point-i),abs(point-i))))
        return min(tmp_all)
