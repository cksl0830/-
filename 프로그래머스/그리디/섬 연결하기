def solution(n, costs):
    costs.sort(key=lambda x:x[2]) #비용순으로 정렬 
    routes = set([costs[0][0], costs[0][1]]) #방문한 섬 저장
    answer = costs[0][2]
    
    while n != len(routes):
        for i, v in enumerate(costs[1:]):
            if v[0] in routes and v[1] in routes: #이미 방문했으면 패스 
                continue
                
            if v[0] in routes or v[1] in routes: #둘중 하나만 방문시 정점 추가 
                routes.update([v[0], v[1]]) #set이라 중복방문 안함
                answer += v[2]
                break
        
    return answer
    


// 다른 사람의 풀이 ( kruskal algorithm (사이클x & 유니온 알고리즘으로 같은 집합x) ) 

parent=[]

def find_parent(parent, n):
    if parent[n] != n:
        parent[n] = find_parent(parent, parent[n])
    return parent[n]
    
def union_parent(parent, a, b):
    a = find_parent(parent, a)
    b = find_parent(parent, b)
    if a > b:
        parent[a] = b
    else:
        parent[b] = a

def solution(n, costs):
    global parent
    parent = [i for i in range(n)] #아직 방문 안함 
    costs.sort(key=lambda x: x[2]) # cost 기준으로 오름차순 정렬
    answer=0

    for a, b, c in costs:
        if find_parent(parent, a) != find_parent(parent, b):
            union_parent(parent, a, b)
            answer += c

    return answer
