def solution(genres, plays):
    answer = []
    dic1={} #장르별로 고유번호, 재생횟수를 담는 딕셔너리
    dic2={} #총 재생횟수를 비교하기 위해 선언 

    for i, (g, p) in enumerate(zip(genres, plays)):
        if g in dic1:
            dic1[g].append((i, p)) #고유번호와 재생횟수 함께 저장
        else:
            dic1[g] = [(i, p)]

        if g in dic2:
            dic2[g] += p
        else:
            dic2[g] = p

    for (g, allp) in sorted(dic2.items(), key=lambda x:x[1], reverse=True):  #총 재생횟수 순서로 정렬
        for (i, p) in sorted(dic1[g], key=lambda x:x[1], reverse=True)[:2]:  #2개까지만 슬라이싱해서 
            answer.append(i)    # 고유번호값 넣기

    return answer
    
  
// 다른 사람의 풀이 ( 로직은 같으나 효율적인 풀이 생각이 안날 때 이렇게 푸는 연습도 해야할 듯 ) 

def solution(genres, plays):
    answer = []
    temp = []
    total_genre_d = {}

    temp = [[genres[i], plays[i], i] for i in range(len(genres))]   # [장르, 재생횟수, 고유 번호] 리스트
    temp = sorted(temp, key=lambda x: (x[0], -x[1], x[2]))  # 많이 재생될수록, 같다면 고유번호가 낮을수록

    for g in temp:  # {장르 : 총 재생횟수} 딕셔너리 생성
        if g[0] not in total_genre_d:
            total_genre_d[g[0]] = g[1]
        else:
            total_genre_d[g[0]] += g[1]
    
    total_genre_d = sorted(total_genre_d.items(), key = lambda x: -x[1])    # 재생횟수가 많은 순서로 장르 정렬
    
    for i in total_genre_d: # 같은 장르 내에서는 최대 2곡까지 조건대로 수록
        count = 0
        for j in temp:
            if i[0] == j[0]:
                count += 1
                if count > 2:
                    break
                else:
                    answer.append(j[2])
                    
     return answer
                        
                        
                        
                        
                        
